// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: task.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO
    tasks (
        file_id,
        job_id,
        target_format
    )
VALUES ($1, $2, $3)
RETURNING
    id, file_id, job_id, converted_file_name, target_format, status, started_at, completed_at, error_message, created_at, updated_at
`

type CreateTaskParams struct {
	FileID       pgtype.Int4
	JobID        pgtype.Int4
	TargetFormat string
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask, arg.FileID, arg.JobID, arg.TargetFormat)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.JobID,
		&i.ConvertedFileName,
		&i.TargetFormat,
		&i.Status,
		&i.StartedAt,
		&i.CompletedAt,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, file_id, job_id, converted_file_name, target_format, status, started_at, completed_at, error_message, created_at, updated_at FROM tasks WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.JobID,
		&i.ConvertedFileName,
		&i.TargetFormat,
		&i.Status,
		&i.StartedAt,
		&i.CompletedAt,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :one
UPDATE tasks
SET
    status = $2,
    started_at = COALESCE($3, started_at),
    completed_at = COALESCE($4, completed_at),
    converted_file_name = COALESCE($5, converted_file_name),
    error_message = COALESCE($6, error_message)
WHERE
    id = $1
RETURNING
    id, file_id, job_id, converted_file_name, target_format, status, started_at, completed_at, error_message, created_at, updated_at
`

type UpdateTaskStatusParams struct {
	ID                int32
	Status            NullTaskStatus
	StartedAt         pgtype.Timestamptz
	CompletedAt       pgtype.Timestamptz
	ConvertedFileName pgtype.Text
	ErrorMessage      pgtype.Text
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTaskStatus,
		arg.ID,
		arg.Status,
		arg.StartedAt,
		arg.CompletedAt,
		arg.ConvertedFileName,
		arg.ErrorMessage,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.FileID,
		&i.JobID,
		&i.ConvertedFileName,
		&i.TargetFormat,
		&i.Status,
		&i.StartedAt,
		&i.CompletedAt,
		&i.ErrorMessage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
